quickj改进：

1.多数据库连接的支持，开发人员可以在程序中指定使用那个数据库连接进行数据的操作，这有几点用途：
	a.的确需要同时操作多个数据库，可以天然支持并且可靠的使用hibernate，目前的方案是通过appconfig.xml
	  进行额外的数据库链接配置，但新配的数据库不能使用hibernate。
	b.数据水平分区的需要。开发人员可以根据实际需要决定将数据存储在哪个数据库中，特别当一些表是公用的
	     时候，这个额外的数据库链接就可以使用了。目前会在思正的top产品使用这个技术。
	     
2.route的annoation支持
	目前系统是通过约定实现url到Action的映射的，当我们需要比较详实的命名Action的时候，会使得url很长
	并且很容易暴露设计的目标。所以我们需要新增一个url route机制，建议使用annoation的方式实现，即增加
	@Route(’a','说明'):如果标记在Action类里，则所有该Action类的url均会被简化成/a开始
	@Route('m','说明'):如果标记在Method里，则该方法的url被简化成m开始
	其他的约定仍旧参照目前的设计，只是通过这种方法缩短url。
	同时在server启动的时候，需要检查url的命名空间是否有冲突，防止发现错误的时候无法确认，冲突包括2个方面
	一个新命名url之间的冲突，一个是新命名的url和Action名称约定之间的冲突。
3. 智能url错误解析，如果url拼写错误了，则应该获得自动的解析，比如/getInfo和/getinfo都应该被映射到GetInfoAction的class中。
4. 补充一些unit 测试

已经完成的修改：	    
1.graceful shutdown的支持
           目前我们通过nginx前端进行转发实现负载均衡，同时启用Memcache Session实现了Session的共享，从而
           从而实现了应用的水平扩展。同时在shutdown的时候可以减少对用户的影响，但是还是会有一些用户受到重启
           的影响，当那些用户正在进行操作的时候就会受重启的影响，所以增加了graceful shutdown功能，这样每个
           已经响应的请求都有10s(可以通过命令行-Dgraceful.time=10000参数进行指定)。该模式只有在production
           模式下才有效，通过命令行启动的时候需要增加-Drun.mode=production才会支持这个功能。
           

2.异常处理的改进，目前异常处理在core中完成，直接打印了异常信息，但是无法提供更多的上下文环境，比如
     在淘宝的应用中，可能需要打印当前的nickname，操作的url等等，所以异常处理通过继承的方式向外提供接口。

3.增加一个用户慢操作记录分析的Filter，目前无法知道用户的Action操作到底花了多少时间，这样无法分析用户界面的
  响应时间，所以，我们增加一个SlowActionLogFilter，用于记录那些操作时间过长的Action,从而改进他们。
       		     
4.可以设定cookie的域名，这样在多服务器的环境下，通过cookie实现域名的漫游。
           